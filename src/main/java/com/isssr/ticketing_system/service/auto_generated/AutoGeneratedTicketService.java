package com.isssr.ticketing_system.service.auto_generated;

import com.isssr.ticketing_system.controller.mailController.MailController;
import com.isssr.ticketing_system.controller.mailController.MailSenderController;
import com.isssr.ticketing_system.model.Ticket;
import com.isssr.ticketing_system.model.auto_generated.scheduler.TaskScheduler;
import com.isssr.ticketing_system.model.auto_generated.temporary.DataBaseTimeQuery;
import com.isssr.ticketing_system.model.auto_generated.temporary.WrongQueryMailMode;
import com.isssr.ticketing_system.repository.QueryRepository;
import com.isssr.ticketing_system.repository.TargetRepository;
import com.isssr.ticketing_system.repository.TeamRepository;
import com.isssr.ticketing_system.repository.TicketRepository;
import com.isssr.ticketing_system.service.*;
import org.quartz.SchedulerException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

@Service
public class AutoGeneratedTicketService implements Observer {

    @Value("${wrong.query.mail.type}")
    private String wrongQueryMailType;

    @Autowired
    private TargetRepository targetRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private TicketRepository ticketRepository;

    @Autowired
    private TicketService ticketService;

    private List<DataBaseTimeQuery> activeQueries = new ArrayList<>();

    @Autowired
    private TaskScheduler taskScheduler;

    @Autowired
    private UserSwitchService userSwitchService;

    @Autowired
    private QueryRepository queryRepository;

    @Autowired
    private QueryService queryService;

    /**
     * external services
     **/
    @Autowired
    private TicketStatusService ticketStatusService;

    @Autowired
    private TicketSourceService ticketSourceService;

    @Autowired
    private TicketCategoryService ticketCategoryService;

    @Autowired
    private UserService userService;

    @Autowired
    private TargetService targetService;

    @Autowired
    private VisibilityService visibilityService;

    @Autowired
    private MailSenderController mailSenderController;


    @Override
    public void update(Observable o, Object arg) {


        if (! (o instanceof DataBaseTimeQuery))
            return;

        DataBaseTimeQuery dataBaseTimeQuery = (DataBaseTimeQuery) o;

        try {
            if (dataBaseTimeQuery.executeQuery(this.userSwitchService, this.queryService)) {
                this.generateTicket(dataBaseTimeQuery);
            }
        } catch (SQLException exception) {

            /*

            //stop query
            try {

                this.disableQuery(dataBaseTimeQuery);

            } catch (SchedulerException ex) {

                ex.printStackTrace();

            }

            //send mail to query author
            this.sendMail("author", exception, dataBaseTimeQuery);

            */

        } catch (DataAccessException exception) {

            /*

            //stop query
            try {

                this.disableQuery(dataBaseTimeQuery);

            } catch (SchedulerException ex) {

                ex.printStackTrace();

            }

            // send email to admin
            this.sendMail("administration", exception, dataBaseTimeQuery);

            */

        }

    }

    /**
     * send mail to @mailAddress with @exception and @query information
     * **/
    private void sendMail(String mailAddress, Exception exception, DataBaseTimeQuery query) {

        String mailAdditionalMsg = query.toMailPrettyString() + "\n\n" + exception.getMessage();

        this.mailSenderController.sendMail(mailAddress, this.wrongQueryMailType, mailAdditionalMsg);

    }

    public void generateTicket(DataBaseTimeQuery query) {

        Ticket ticket = new Ticket(
                ticketStatusService.findByName("PENDING").get(),
                ticketSourceService.findByName("SYSTEM").get(),
                Instant.now(),
                ticketCategoryService.findByName("SYSTEM").get(),
                "Query auto generated ticket",
                query.getDescription(),
                targetService.findByName("System").get(),
                query.priority(),
                visibilityService.findByName("PRIVATE").get()
        );

        ticketService.save(ticket);

    }

    public boolean activateQuery(DataBaseTimeQuery query) throws ParseException, SchedulerException {

        //set this service as observer
        query.addObserver(this);

        taskScheduler.addJob(query);

        this.activeQueries.add(query);

        System.out.println("DataBaseTimeQuery: " + query.printQuery() + " --> SCHEDULED");

        return true;

    }


    public boolean disableQuery(DataBaseTimeQuery query) throws SchedulerException {

        taskScheduler.removeJob(query);

        boolean removed = this.activeQueries.remove(query);

        query.deleteObserver(this);

        System.out.println("DataBaseTimeQuery: " + query.printQuery() + " --> REMOVED with value " + removed);

        return removed;

    }
}
