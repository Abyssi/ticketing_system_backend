package com.isssr.ticketing_system.service.auto_generated;

import com.isssr.ticketing_system.mail.mailHandler.MailSenderHandler;
import com.isssr.ticketing_system.model.Ticket;
import com.isssr.ticketing_system.model.auto_generated.query.DBScheduledCountQuery;
import com.isssr.ticketing_system.model.auto_generated.query.Query;
import com.isssr.ticketing_system.model.auto_generated.query.ScheduledQuery;
import com.isssr.ticketing_system.model.auto_generated.scheduler.TaskScheduler;
import com.isssr.ticketing_system.repository.TargetRepository;
import com.isssr.ticketing_system.repository.TeamRepository;
import com.isssr.ticketing_system.repository.TicketRepository;
import com.isssr.ticketing_system.service.*;
import org.quartz.SchedulerException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;

import java.sql.SQLException;
import java.text.ParseException;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

@Service
public class AutoGeneratedTicketService implements Observer {

    @Value("${wrong.query.mail.type}")
    private String wrongQueryMailType;

    @Value("${admin.email}")
    private String ADMIN_EMAIL;

    @Autowired
    private TargetRepository targetRepository;

    @Autowired
    private TeamRepository teamRepository;

    @Autowired
    private TicketRepository ticketRepository;

    @Autowired
    private TicketService ticketService;

    private List<ScheduledQuery> activeScheduledQueries = new ArrayList<>();

    @Autowired
    private TaskScheduler taskScheduler;

    @Autowired
    private UserSwitchService userSwitchService;

    @Autowired
    private QueryService queryService;

    /**
     * external services
     **/
    @Autowired
    private TicketStatusService ticketStatusService;

    @Autowired
    private TicketSourceService ticketSourceService;

    @Autowired
    private TicketCategoryService ticketCategoryService;

    @Autowired
    private UserService userService;

    @Autowired
    private TargetService targetService;

    @Autowired
    private VisibilityService visibilityService;

    @Autowired
    private MailSenderHandler mailSenderController;


    @Override
    public void update(Observable o, Object arg) {


        if (o instanceof DBScheduledCountQuery) {

            DBScheduledCountQuery dbScheduledCountQuery = (DBScheduledCountQuery) o;

            try {
                if (dbScheduledCountQuery.executeQuery(this.userSwitchService, this.queryService)) {
                    this.generateTicket(dbScheduledCountQuery);
                }
            } catch (SQLException exception) {

                exception.printStackTrace();


                //stop query
                try {

                    queryService.disableQuery(dbScheduledCountQuery);

                } catch (SchedulerException ex) {

                    ex.printStackTrace();

                }

                //send mail to query author
                this.sendMail(dbScheduledCountQuery.getAuthor(), exception, dbScheduledCountQuery);


            } catch (DataAccessException exception) {

                exception.printStackTrace();


                //stop query
                try {

                    queryService.disableQuery(dbScheduledCountQuery);


                } catch (SchedulerException ex) {

                    ex.printStackTrace();

                }

                // send email to admin
                this.sendMail(this.ADMIN_EMAIL, exception, dbScheduledCountQuery);


            }
        }

    }

    /**
     * send mail to @mailAddress with @exception and @query information
     **/
    private void sendMail(String mailAddress, Exception exception, Query query) {

        String mailAdditionalMsg = query.toMailPrettyString() + "\n\n" + exception.getMessage();

        this.mailSenderController.sendMail(mailAddress, this.wrongQueryMailType, mailAdditionalMsg);

    }

    public void generateTicket(Query query) {

        Ticket ticket = new Ticket(
                ticketStatusService.findByName("PENDING").get(),
                ticketSourceService.findByName("SYSTEM").get(),
                Instant.now(),
                ticketCategoryService.findByName("GENERAL").get(),
                "Query auto generated ticket",
                query.getDescription(),
                userService.findByEmail(ADMIN_EMAIL).get(),
                targetService.findByName("System").get(),
                query.priority(),
                visibilityService.findByName("PRIVATE").get()
        );

        ticketService.save(ticket);

    }

    public boolean activateQuery(ScheduledQuery query) throws ParseException, SchedulerException {

        //set this service as observer
        query.addObserver(this);

        taskScheduler.addJob(query);

        this.activeScheduledQueries.add(query);

        System.out.println("ScheduledQuery: " + query.getDescription() + " --> SCHEDULED");

        return true;

    }

    public boolean disableQuery(ScheduledQuery query) throws SchedulerException {

        taskScheduler.removeJob(query);

        boolean removed = this.activeScheduledQueries.remove(query);

        query.deleteObserver(this);

        System.out.println("ScheduledQuery: " + query.getJobKey() + " --> REMOVED with value " + removed);

        return removed;

    }
}
